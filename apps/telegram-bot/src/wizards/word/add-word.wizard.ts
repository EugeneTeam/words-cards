import { Action, Ctx, Wizard, WizardStep } from 'nestjs-telegraf';
import { ConfigurationService } from '../../configuration/configuration.service';
import { ContextInterface } from '../../interfaces/context.interface';
import { ConfigurationInterface } from '../../configuration/interfaces/configuration.interface';
import { UiBuilderUtil } from '../../utils/ui-builder/ui-builder.util';
import { FileService } from '../../file/file.service';
import { UploadFileResponseInterface } from '../../file/interfaces/upload-file-response.interface';
import { CategoryService } from '../../category/category.service';
import { AddWordIsolation } from './add-word.isolation';

@Wizard('add-word-wizard')
export class AddWordWizard extends AddWordIsolation {
  constructor(
    private readonly configurationService: ConfigurationService,
    private readonly fileService: FileService,
    categoryService: CategoryService,
  ) {
    super(categoryService, 'add-word-wizard', 'test');
  }

  @WizardStep(1)
  public async enterWordInfo(@Ctx() context: ContextInterface): Promise<void> {
    const config: ConfigurationInterface =
      await this.configurationService.findOneByUserUuid({
        uuid: context.session.userUuid,
      });
    context.wizard.state.defaultLanguageForNewWord =
      config.defaultLanguageForNewWord.uuid;
    context.wizard.state.defaultLanguageForWordTranslation =
      config.defaultLanguageForWordTranslation.uuid;

    await context.replyWithHTML(
      context.translatorService.getTranslate('word-enter'),
    );

    await context.wizard.next();
  }

  @WizardStep(2)
  private async enterWord(@Ctx() context: ContextInterface): Promise<void> {
    context.wizard.state.word = this.getMessageText(context);
    await context.reply(
      context.translatorService.getTranslate('word-translation'),
    );
    await context.wizard.next();
  }

  @WizardStep(3)
  private async enterTranslation(
    @Ctx() context: ContextInterface,
  ): Promise<void> {
    context.wizard.state.translation = this.getMessageText(context);
    await context.wizard.next();
    await this.renderWizardStep(context, 4);
  }

  @WizardStep(4)
  private async addMediaQuestion(
    @Ctx() context: ContextInterface,
  ): Promise<void> {
    const uiBuild = new UiBuilderUtil(context.languageIso)
      .useInlineKeyboardMethod()
      .addNewButtonLine()
      .addTitle('add-media-question')
      .addButton('add', 'add-media')
      .addButton('skip', 'skip')
      .build();

    context.wizard.state.check = true;

    await context.replyWithHTML(uiBuild.title, uiBuild.buttons);
    await context.wizard.next();
  }

  @WizardStep(5)
  private async buffer(@Ctx() context: ContextInterface): Promise<void> {
    await context.reply('–û–∂–∏–¥–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  @WizardStep(6)
  private async mediaUpload(@Ctx() context: ContextInterface): Promise<void> {
    // Protection against downloading multiple files at the same time
    if (context.wizard.state.check) {
      context.wizard.state.check = false;
      const result: UploadFileResponseInterface =
        await this.fileService.getFileFromTelegrafContext(context);
      if (!result.status) {
        context.wizard.state.check = true;
        await context.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞');
      } else {
        await context.reply('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω');
        await this.renderWizardStep(context, 7);
        await context.wizard.next();
      }
    } else {
      await context.reply(
        '–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ–ª–µ–µ 1 —Ñ–∞–π–ª–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.',
      );
    }
  }

  @WizardStep(7)
  private async as(@Ctx() context: ContextInterface): Promise<void> {
    const uiBuild = new UiBuilderUtil(context.languageIso)
      .useInlineKeyboardMethod()
      .addNewButtonLine()
      .useTitleKeyAsText(true)
      .addTitle('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')
      .useTitleKeyAsText(false)
      .addButton('add', 'choose-category')
      .addButton('skip', 'skip-category')
      .build();
    await context.replyWithHTML(uiBuild.title, uiBuild.buttons);
    await context.wizard.next();
  }

  // TODO –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π + –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

  @WizardStep(5)
  private async buffer1(@Ctx() context: ContextInterface): Promise<void> {
    await context.reply('–û–∂–∏–¥–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  @Action('add-media')
  private async addMedia(@Ctx() context: ContextInterface): Promise<void> {
    // got to step 5
    await context.wizard.next();

    await context.removePreviousKeyboard();
    // TODO –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–Ω–µ—Å—Ç–∏ –≤ ru.json
    await context.replyWithHTML(
      `<b>–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</b>. 
–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å <b>–∞—É–¥–∏–æ</b>, <b>–≤–∏–¥–µ–æ</b>, <b>–∫–∞—Ä—Ç–∏–Ω–∫—É</b> –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å <b>–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>.

–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:
üîò–ö–∞—Ä—Ç–∏–Ω–∫–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∏ –±–µ–∑ —Å–∂–∞—Ç–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: png, jpg, webp)
üîò–í–∏–¥–µ–æ
üîò–ê—É–¥–∏–æ
üîò–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
`,
    );
  }

  @Action('skip')
  private async skip(@Ctx() context: ContextInterface): Promise<void> {
    await context.removePreviousKeyboard();
    await this.renderWizardStep(context, 7);
  }
}
